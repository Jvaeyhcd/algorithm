{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "初始化t个测试用户的cpp模板": {
		"prefix": "cpp",
		"body": [
            "/**",
            " * @File    :   $TM_FILENAME",
            " * @Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
            " * @Author  :   Jvaeyhcd",
            " * @Contact :   huangcd1992@gmail.com",
            "**/",
			"#include <bits/stdc++.h>",
			"using namespace std;",
            "",
            "#define fio ios_base::sync_with_stdio(false); cin.tie(NULL);",
            "",
            "void solve() {",
            "    $1",
            "}",
            "",
            "int main() {",
            "    fio;",
            "    int t;",
            "    cin >> t;",
            "",
            "    while(t--)",
            "        solve();",
            "",
            "    return 0;",
            "}"
		],
		"description": "A cpp file template with t test cases."
	},
    "初始化cpp模板": {
        "prefix": "cpp",
		"body": [
            "/**",
            " * @File    :   $TM_FILENAME",
            " * @Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
            " * @Author  :   Jvaeyhcd",
            " * @Contact :   huangcd1992@gmail.com",
            "**/",
			"#include <bits/stdc++.h>",
			"using namespace std;",
            "",
            "#define fio ios_base::sync_with_stdio(false); cin.tie(NULL);",
            "",
            "void solve() {",
            "    $1",
            "}",
            "",
            "int main() {",
            "    fio;",
            "    solve();",
            "    return 0;",
            "}"
		],
		"description": "A cpp file template."
    },
    "INCLUDE": {
        "prefix": "include",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
		],
		"description": "base include"
    },
    "prefix function": {
        "prefix": "sprefix",
        "body": [
            "vector<int> prefix_function(string s) {",
            "    int n = (int)s.length();",
            "    vector<int> pi(n);",
            "    for (int i = 1; i < n; i++) {",
            "        int j = pi[i - 1];",
            "        while (j > 0 && s[i] != s[j]) j = pi[j - 1];",
            "        if (s[i] == s[j]) j++;",
            "        pi[i] = j;",
            "    }",
            "    return pi;",
            "}",
        ],
        "description": "String's prefix function."
    },
    "KMP find occurences": {
        "prefix": "kmp",
        "body": [
            "vector<int> find_occurences(string text, string pattern) {",
            "    string cur = pattern + '#' + text;",
            "    int sz1 = text.size(), sz2 = pattern.size();",
            "    vector<int> v;",
            "    vector<int> lps = prefix_function(cur);",
            "    for (int i = sz2 + 1; i <= sz1 + sz2; i++) {",
            "        if (lps[i] == sz2) v.push_back(i - 2 * sz2);",
            "    }",
            "    return v;",
            "}"
        ]
    },
    "Z Algorithm": {
        "prefix": "z_function",
        "body": [
            "vector<int> z_function(string s) {",
            "    int n = (int)s.length();",
            "    vector<int> z(n);",
            "    for (int i = 1, l = 0, r = 0; i < n; ++i) {",
            "        if (i <= r && z[i - l] < r - i + 1) {",
            "            z[i] = z[i - l];",
            "        } else {",
            "            z[i] = max(0, r - i + 1);",
            "            while (i + z[i] < n && s[z[i]] == s[i + z[i]]) ++z[i];",
            "        }",
            "        if (i + z[i] - 1 > r) l = i, r = i + z[i] - 1;",
            "    }",
            "    return z;",
            "}"
        ]
    },
    "string split": {
        "prefix": "s_split",
        "body": [
            "vector<string> split(const string& str, const string& delim) {",
            "    vector<string> res;",
            "    if (\"\" == str) return res;",
            "    char * strs = new char[str.length() + 1];",
            "    strcpy(strs, str.c_str());",
            "",
            "    char * d = new char[delim.length() + 1];",
            "    strcpy(d, delim.c_str());",
            "",
            "    char *p = strtok(strs, d);",
            "    while (p) {",
            "        string s = p;",
            "        res.push_back(s);",
            "        p = strtok(NULL, d);",
            "    }",
            "    return res;",
            "}"
        ],
        "description": "Split string."
    },
    "quick pow": {
        "prefix": "qpow",
        "body": [
            "template <typename T=long>",
            "T qpow(T a, T n, T mod) {",
            "    if (n == 0) {",
            "        return 1;",
            "    } else if (n % 2 == 1) {",
            "        return qpow(a, n - 1, mod) * a % mod;",
            "    } else {",
            "        T temp = qpow(a, n / 2, mod) % mod;",
            "        return temp * temp % mod;",
            "    }",
            "}"
        ],
        "description": "quick pow"
    }
}